import { callbackType, DynamicObject, IInlineButton, IMessageQueueProps, initCallbackType, IResultProps, ITelegramApiProps, listenerType, watchCallbackType } from "./@types/telegram";
export default class TelegramApi {
    private readonly SERIES;
    private readonly PARALLEL;
    private readonly getUpdatesUrl;
    private readonly sendMessageUrl;
    private readonly deleteMessageUrl;
    private lastUpdateMessageId?;
    private pollingArguments;
    private options;
    private messageQueue;
    /**
     * constructor
     * @param teletramToken: string;
     * @paran options?: ITelegramApiProps
     * @return void
     */
    constructor(teletramToken: string, options?: ITelegramApiProps);
    /**
     * init
     * @param callback: initCallbackType
     */
    init(callback: initCallbackType): void;
    /**
     * getOptions
     */
    getOptions(): DynamicObject<any>;
    /**
     * pushMessageQueue
     * @param chatId: number 메시지받을 사람의 chat_id
     * @param message: string 메시지 내용
     */
    pushMessageQueue({ chatId, message }: IMessageQueueProps): void;
    /**
     * callMessageQueue
     * 메시지큐에 들어가있는 메시지를 처음 들어가있는 순서대로 발송한다.
     */
    private callMessageQueue;
    /**
     * startPolling
     * @param options: ITelegramApiProps
     */
    private startPolling;
    /**
     * pollParallelJob
     * 메시지 병렬처리
     * @param arrResult: IResultProps[]
     */
    private pollParallelJob;
    /**
     * pollSeriesJob
     * 메시지 직렬처리
     * @param arrResult: IResultProps[]
     */
    private pollSeriesJob;
    /**
     * pollJob
     * 메시지 처리
     * @param item: IResultProps
     */
    private pollJob;
    /**
     * callTextMessage
     * 채팅창에 일반메시지 입력되었을때 콜백처리
     * @param message: IMessage
     */
    private callTextMessage;
    /**
     * callCallbackMessage
     * 채팅창에 생성된 버튼을 클릭하였을때 콜백처리
     * @param callback_query: ICallbackProps
     */
    private callCallbackMessage;
    /**
     * on 이벤트리스너에 등록된 콜백함수 호출
     */
    private callCallback;
    /**
     * getPollingCallback
     * listener에 등로된 콜백함수를 리턴
     * @param listener: "text" | "callback"
     * @return (param: IPollingCallbackProps) => Promise<void>
     */
    private getPollingCallback;
    /**
     * isPollingListener
     * 이미 listener에 등록되어있는지 체크한다.
     * @param listener: "text" | "callback"
     * @return boolean
     */
    private isPollingListener;
    /**
     * on
     * @param listener: listenerType
     * @param callback: callbackType
     */
    on(listener: listenerType, callback: callbackType): void;
    watch(watchCallback: watchCallbackType, delay?: number): Promise<void>;
    /**
     * 채팅방 메시지 받아오기
     */
    getUpdates(): Promise<IResultProps[] | undefined>;
    /**
     * 메시지 보내기
     * @param chatId: number
     * @param message: string
     * @param parse_mode?: string
     */
    sendMessage(chatId: number, message: string, parse_mode?: string): Promise<void>;
    /**
     * inline button 메시지 보내기
     * @param chatId: number
     * @param message: string
     * @param inlineButton: IInlineButton[][]
     * @param parse_mode?: string
     */
    sendInlineButtonMessage(chatId: number, message: string, inlineButton: IInlineButton[][], parse_mode?: string): Promise<void>;
    /**
     * inline button 메시지 보내기
     * @param chatId: number
     * @param  message: string
     * @param  keyboard: string[][]
     */
    sendKeyboardMessage(chatId: number, message: string, keyboard: string[][]): Promise<void>;
    /**
     * 메시지 삭제하기
     * @param chatId: number
     * @param messageId: number
     */
    deleteMessage(chatId: number, messageId: number): Promise<void>;
    /**
     * 채팅방 마지막 메시지번호 가져오기
     */
    private getLastUpdateMessageId;
    /**
     * 텔레그램 마지막 메시지ID를 가져온다.
     * @param result: IResultProps[]
     */
    private getLastMessageId;
    /**
     * 텔레그램 마지막 메시지ID를 등록한다.
     * @param updateId?: number
     */
    private setLastMessageId;
    /**
     * sleep
     * @param ms: number
     */
    sleep(ms: number): Promise<unknown>;
    /**
     * sleep
     * @param msg: any
     */
    asyncLog(msg: any): Promise<unknown>;
}
