"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class Fetch {
    constructor() { }
    get(url, timeout = 1000) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const source = axios_1.default.CancelToken.source();
                setTimeout(() => {
                    source.cancel(`request timeout: ${timeout}, ${url}`);
                }, timeout);
                const res = yield axios_1.default.get(url, {
                    cancelToken: source.token,
                });
                return res;
            }
            catch (err) {
                if (axios_1.default.isCancel(err)) {
                    console.log(err);
                }
            }
        });
    }
    post(url, params, timeout = 1000) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const source = axios_1.default.CancelToken.source();
                setTimeout(() => {
                    source.cancel(`request timeout: ${timeout}, ${url}`);
                }, timeout);
                const res = yield axios_1.default.post(url, params, { cancelToken: source.token });
                return res;
            }
            catch (err) {
                if (axios_1.default.isCancel(err)) {
                    console.log(err);
                }
            }
        });
    }
}
exports.default = new Fetch();
//# sourceMappingURL=Fetch.js.map